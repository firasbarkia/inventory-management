{
  "info": {
    "name": "Inventory Management API Test Workflow",
    "description": "Comprehensive test workflow covering registration, approval, roles, and all controllers.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "0. Setup & Registration",
      "item": [
        {
          "name": "Register Pending User (Admin)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set(\"admin_username\", \"admin_\" + Date.now() + \"@test.com\");",
                  "pm.environment.set(\"admin_password\", \"password123\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "    pm.expect(jsonData.username).to.eql(pm.environment.get(\"admin_username\"));",
                  "    pm.expect(jsonData.accountStatus).to.eql(\"PENDING\");",
                  "    pm.expect(jsonData.roles).to.be.an('array').that.is.empty;",
                  "    pm.environment.set(\"pending_admin_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{admin_username}}\",\n    \"password\": \"{{admin_password}}\",\n    \"email\": \"{{admin_username}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Register Pending User (Worker)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set(\"worker_username\", \"worker_\" + Date.now() + \"@test.com\");",
                  "pm.environment.set(\"worker_password\", \"password123\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has user data with PENDING status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "    pm.expect(jsonData.username).to.eql(pm.environment.get(\"worker_username\"));",
                  "    pm.expect(jsonData.accountStatus).to.eql(\"PENDING\");",
                  "    pm.expect(jsonData.roles).to.be.an('array').that.is.empty;",
                  "    pm.environment.set(\"pending_worker_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{worker_username}}\",\n    \"password\": \"{{worker_password}}\",\n    \"email\": \"{{worker_username}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Register Pending User (Teacher)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set(\"teacher_username\", \"teacher_\" + Date.now() + \"@test.com\");",
                  "pm.environment.set(\"teacher_password\", \"password123\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has user data with PENDING status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "    pm.expect(jsonData.username).to.eql(pm.environment.get(\"teacher_username\"));",
                  "    pm.expect(jsonData.accountStatus).to.eql(\"PENDING\");",
                  "    pm.expect(jsonData.roles).to.be.an('array').that.is.empty;",
                  "    pm.environment.set(\"pending_teacher_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{teacher_username}}\",\n    \"password\": \"{{teacher_password}}\",\n    \"email\": \"{{teacher_username}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Register Pending User (Supplier)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set(\"supplier_username\", \"supplier_\" + Date.now() + \"@test.com\");",
                  "pm.environment.set(\"supplier_password\", \"password123\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has user data with PENDING status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "    pm.expect(jsonData.username).to.eql(pm.environment.get(\"supplier_username\"));",
                  "    pm.expect(jsonData.accountStatus).to.eql(\"PENDING\");",
                  "    pm.expect(jsonData.roles).to.be.an('array').that.is.empty;",
                  "    pm.environment.set(\"pending_supplier_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{supplier_username}}\",\n    \"password\": \"{{supplier_password}}\",\n    \"email\": \"{{supplier_username}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Attempt Login Pending User (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized (Disabled)\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "pm.test(\"Response body indicates pending approval\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"pending approval\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{admin_username}}\",\n    \"password\": \"{{admin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Admin User Approval & Login",
      "item": [
        {
          "name": "Admin Login (Initial - Requires Pre-existing Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains token\", function () {",
                  "    var token = pm.response.text();",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.environment.set(\"initial_admin_token\", token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"admin\", \n    \"password\": \"adminpass\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "description": "Logs in a pre-existing admin user to approve others. Adjust credentials if needed."
          },
          "response": []
        },
        {
          "name": "Admin Gets Pending Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response is an array and includes pending users\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    const adminPending = jsonData.some(user => user.id == pm.environment.get(\"pending_admin_id\"));",
                  "    const workerPending = jsonData.some(user => user.id == pm.environment.get(\"pending_worker_id\"));",
                  "    pm.expect(adminPending).to.be.true;",
                  "    pm.expect(workerPending).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{initial_admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/admin/users/pending",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "pending"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Approves Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has user data with ACTIVE status and ADMIN role\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"pending_admin_id\")));",
                  "    pm.expect(jsonData.accountStatus).to.eql(\"ACTIVE\");",
                  "    pm.expect(jsonData.roles).to.include(\"ADMIN\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{initial_admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\"ADMIN\"]"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{pending_admin_id}}/approve",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "{{pending_admin_id}}",
                "approve"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Approves Worker User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has user data with ACTIVE status and WORKER role\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"pending_worker_id\")));",
                  "    pm.expect(jsonData.accountStatus).to.eql(\"ACTIVE\");",
                  "    pm.expect(jsonData.roles).to.include(\"WORKER\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{initial_admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\"WORKER\"]"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{pending_worker_id}}/approve",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "{{pending_worker_id}}",
                "approve"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Approves Teacher User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has user data with ACTIVE status and TEACHER role\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"pending_teacher_id\")));",
                  "    pm.expect(jsonData.accountStatus).to.eql(\"ACTIVE\");",
                  "    pm.expect(jsonData.roles).to.include(\"TEACHER\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{initial_admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\"TEACHER\"]"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{pending_teacher_id}}/approve",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "{{pending_teacher_id}}",
                "approve"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Approves Supplier User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has user data with ACTIVE status and SUPPLIER role\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"pending_supplier_id\")));",
                  "    pm.expect(jsonData.accountStatus).to.eql(\"ACTIVE\");",
                  "    pm.expect(jsonData.roles).to.include(\"SUPPLIER\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{initial_admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\"SUPPLIER\"]"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{pending_supplier_id}}/approve",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "{{pending_supplier_id}}",
                "approve"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login Approved Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains token\", function () {",
                  "    var token = pm.response.text();",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.environment.set(\"admin_token\", token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{admin_username}}\",\n    \"password\": \"{{admin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login Approved Worker User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains token\", function () {",
                  "    var token = pm.response.text();",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.environment.set(\"worker_token\", token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{worker_username}}\",\n    \"password\": \"{{worker_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login Approved Teacher User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains token\", function () {",
                  "    var token = pm.response.text();",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.environment.set(\"teacher_token\", token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{teacher_username}}\",\n    \"password\": \"{{teacher_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login Approved Supplier User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains token\", function () {",
                  "    var token = pm.response.text();",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.environment.set(\"supplier_token\", token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{supplier_username}}\",\n    \"password\": \"{{supplier_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. User Controller (Admin)",
      "item": [
        {
          "name": "Admin Gets All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response is an array\", function () {",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/admin/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Gets User By ID (Worker)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has correct user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"pending_worker_id\")));",
                  "    pm.expect(jsonData.username).to.eql(pm.environment.get(\"worker_username\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{pending_worker_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "{{pending_worker_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Updates User (Worker)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has updated email\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.email).to.eql(\"updated_\" + pm.environment.get(\"worker_username\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{worker_username}}\",\n    \"email\": \"updated_{{worker_username}}\",\n    \"roles\": [\"WORKER\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{pending_worker_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "{{pending_worker_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Worker Tries to Get All Users (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{worker_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/admin/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Deletes User (Teacher)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{pending_teacher_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "{{pending_teacher_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Gets Deleted User (Not Found)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{pending_teacher_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "{{pending_teacher_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. Supplier Controller",
      "item": [
        {
          "name": "Admin Creates Supplier",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test(\"Response has supplier data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "    pm.expect(jsonData.name).to.eql(\"Test Supplier Alpha\");",
                  "    pm.environment.set(\"supplier_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Supplier Alpha\",\n    \"email\": \"alpha@supplier.test\",\n    \"contactInfo\": \"111-222-3333\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/suppliers",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "suppliers"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Supplier User Gets All Suppliers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response is an array\", function () {",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{supplier_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/suppliers",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "suppliers"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Gets Supplier By ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has correct supplier data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"supplier_id\")));",
                  "    pm.expect(jsonData.name).to.eql(\"Test Supplier Alpha\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/suppliers/{{supplier_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "suppliers",
                "{{supplier_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Updates Supplier",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has updated contact info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.contactInfo).to.eql(\"999-888-7777\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Supplier Alpha Updated\",\n    \"email\": \"alpha_updated@supplier.test\",\n    \"contactInfo\": \"999-888-7777\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/suppliers/{{supplier_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "suppliers",
                "{{supplier_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Worker Tries to Create Supplier (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{worker_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Forbidden Supplier\",\n    \"email\": \"forbidden@supplier.test\",\n    \"contactInfo\": \"000-000-0000\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/suppliers",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "suppliers"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Deletes Supplier",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/suppliers/{{supplier_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "suppliers",
                "{{supplier_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Gets Deleted Supplier (Not Found)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/suppliers/{{supplier_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "suppliers",
                "{{supplier_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "4. Item Controller",
      "item": [
        {
          "name": "Setup: Admin Creates Supplier for Items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test(\"Response has supplier data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set(\"item_supplier_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Item Supplier Beta\",\n    \"email\": \"beta@supplier.test\",\n    \"contactInfo\": \"444-555-6666\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/suppliers",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "suppliers"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Creates Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test(\"Response has item data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "    pm.expect(jsonData.name).to.eql(\"Test Item Alpha\");",
                  "    pm.environment.set(\"item_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Item Alpha\",\n    \"quantity\": 100,\n    \"minStockLevel\": 20,\n    \"supplier\": {\n        \"id\": {{item_supplier_id}}\n    }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "items"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Anyone Gets All Items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response is an array\", function () {",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "items"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Anyone Gets Item By ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has correct item data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"item_id\")));",
                  "    pm.expect(jsonData.name).to.eql(\"Test Item Alpha\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/items/{{item_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "items",
                "{{item_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Updates Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has updated quantity\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantity).to.eql(150);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Item Alpha Updated\",\n    \"quantity\": 150,\n    \"minStockLevel\": 25,\n    \"supplier\": {\n        \"id\": {{item_supplier_id}}\n    }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/items/{{item_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "items",
                "{{item_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Worker Tries to Create Item (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{worker_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Forbidden Item\",\n    \"quantity\": 10,\n    \"minStockLevel\": 5,\n    \"supplier\": {\n        \"id\": {{item_supplier_id}}\n    }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "items"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Deletes Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/items/{{item_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "items",
                "{{item_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Anyone Gets Deleted Item (Not Found)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/items/{{item_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "items",
                "{{item_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "5. Request Controller",
      "item": [
        {
          "name": "Setup: Admin Creates Item for Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test(\"Response has item data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set(\"request_item_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Request Item Beta\",\n    \"quantity\": 50,\n    \"minStockLevel\": 10,\n    \"supplier\": {\n        \"id\": {{item_supplier_id}}\n    }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/items",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "items"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Worker Tries to Create Request (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{worker_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"item\": {\n        \"id\": {{request_item_id}}\n    },\n    \"quantity\": 5,\n    \"status\": \"REQUESTED\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/requests",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Teacher Creates Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test(\"Response has request data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('number');",
                  "    pm.expect(jsonData.quantity).to.eql(3);",
                  "    pm.expect(jsonData.status).to.eql(\"REQUESTED\");",
                  "    pm.environment.set(\"teacher_request_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{teacher_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"item\": {\n        \"id\": {{request_item_id}}\n    },\n    \"quantity\": 3,\n    \"status\": \"REQUESTED\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/requests",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Gets All Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response is an array and includes created requests\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    const workerReq = jsonData.some(req => req.id == pm.environment.get(\"request_id\"));",
                  "    const teacherReq = jsonData.some(req => req.id == pm.environment.get(\"teacher_request_id\"));",
                  "    pm.expect(workerReq).to.be.true;",
                  "    pm.expect(teacherReq).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/requests",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Worker Tries to Get Request By ID (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{worker_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/requests/{{request_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "requests",
                "{{request_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Updates Request Status (Approve)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response has updated status APPROVED\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"APPROVED\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"APPROVED\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/requests/{{request_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "requests",
                "{{request_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Supplier Tries to Create Request (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{supplier_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"item\": {\n        \"id\": {{request_item_id}}\n    },\n    \"quantity\": 1,\n    \"status\": \"REQUESTED\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/requests",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "requests"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Deletes Request (Teacher's)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/requests/{{teacher_request_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "requests",
                "{{teacher_request_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Gets Deleted Request (Not Found)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/requests/{{teacher_request_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "requests",
                "{{teacher_request_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "6. Notification Controller",
      "item": [
        {
          "name": "Admin Checks Low Stock",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Status might be 200 (no notification needed) or 201 (notification created)",
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/notifications/supplier/check-low-stock/{{request_item_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "notifications",
                "supplier",
                "check-low-stock",
                "{{request_item_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Gets All Supplier Notifications",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response is an array\", function () {",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/notifications/supplier",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "notifications",
                "supplier"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Triggers Request Notification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/notifications/worker/request-notification/{{request_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "notifications",
                "worker",
                "request-notification",
                "{{request_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Worker Gets All Worker Notifications",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response is an array\", function () {",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{worker_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/notifications/worker",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "notifications",
                "worker"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Teacher Tries to Get Supplier Notifications (Forbidden)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{teacher_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/notifications/supplier",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "notifications",
                "supplier"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "7. General Negative Tests",
      "item": [
        {
          "name": "Unauthorized Access - Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/admin/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Approves Non-Existent User (Not Found)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 Not Found\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\"WORKER\"]"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users/999999/approve",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "999999",
                "approve"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Admin Approves User with Empty Roles (Bad Request)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[]"
            },
            "url": {
              "raw": "{{base_url}}/api/admin/users/{{pending_worker_id}}/approve",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "admin",
                "users",
                "{{pending_worker_id}}",
                "approve"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080"
    },
    {
      "key": "initial_admin_token",
      "value": "",
      "description": "Token for a pre-existing admin user needed to approve others"
    },
    {
      "key": "admin_username",
      "value": ""
    },
    {
      "key": "admin_password",
      "value": ""
    },
    {
      "key": "pending_admin_id",
      "value": ""
    },
    {
      "key": "admin_token",
      "value": ""
    },
    {
      "key": "worker_username",
      "value": ""
    },
    {
      "key": "worker_password",
      "value": ""
    },
    {
      "key": "pending_worker_id",
      "value": ""
    },
    {
      "key": "worker_token",
      "value": ""
    },
    {
      "key": "teacher_username",
      "value": ""
    },
    {
      "key": "teacher_password",
      "value": ""
    },
    {
      "key": "pending_teacher_id",
      "value": ""
    },
    {
      "key": "teacher_token",
      "value": ""
    },
    {
      "key": "supplier_username",
      "value": ""
    },
    {
      "key": "supplier_password",
      "value": ""
    },
    {
      "key": "pending_supplier_id",
      "value": ""
    },
    {
      "key": "supplier_token",
      "value": ""
    },
    {
      "key": "supplier_id",
      "value": ""
    },
    {
      "key": "item_supplier_id",
      "value": ""
    },
    {
      "key": "item_id",
      "value": ""
    },
    {
      "key": "request_item_id",
      "value": ""
    },
    {
      "key": "request_id",
      "value": ""
    },
    {
      "key": "teacher_request_id",
      "value": ""
    }
  ]
}
